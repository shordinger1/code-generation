import re
import shutil
from pathlib import Path
from language_provider.java.Gradle import DependencyAnalyzer
from language_provider.java.JavaAnalyzer import analysis_java_files
from util import get_rag

project_dir = r"C:\Users\bcjPr\Desktop\gtnh\Twist-Space-Technology-Mod"

RAG = get_rag()

# 可扩展的标签配置（不区分大小写）
TAG_CONFIG = {
    'item': ['item', '物品', '道具'],
    'block': ['block', '方块', '地块'],
    'entity': ['entity', '实体'],
    'world': ['world', '世界', '维度'],
    'network': ['network', 'net', '网络']
}


class MethodClassifier:
    def __init__(self, output_root="classified_methods"):
        self.output_root = Path(output_root)
        self._prepare_dirs()

    def _prepare_dirs(self):
        """创建分类目录结构"""
        # 清空并重建根目录
        if self.output_root.exists():
            shutil.rmtree(self.output_root)
        self.output_root.mkdir()

        # 为每个标签创建目录
        for tag in TAG_CONFIG.keys():
            (self.output_root / tag).mkdir(parents=True)

        # 创建未分类目录
        (self.output_root / "_uncategorized").mkdir()

    def _detect_tags(self, class_name, method_code):
        """检测方法和类的标签"""
        detected_tags = set()

        # 检测类名标签（不区分大小写）
        lower_class = class_name.lower()
        for tag, keywords in TAG_CONFIG.items():
            if any(kw in lower_class for kw in [k.lower() for k in keywords]):
                detected_tags.add(tag)

        # 检测方法注释标签（支持多行注释）
        comment_pattern = r'/\*.*?@tag:\s*([\w\s,]+).*?\*/|//\s*@tag:\s*([\w\s,]+)'
        matches = re.findall(comment_pattern, method_code, re.DOTALL)
        for match in matches:
            tags = [t.strip().lower() for t in (match[0] or match[1]).split(',')]
            for t in tags:
                if t in TAG_CONFIG:
                    detected_tags.add(t)

        return list(detected_tags) if detected_tags else ['_uncategorized']

    def classify_methods(self, all_methods):
        """分类存储方法"""
        class_files = {}  # 记录类文件路径

        for method_signature, method_code in all_methods.items():
            # 解析类名和方法名
            class_name = '.'.join(method_signature.split('.')[:-1])
            method_name = method_signature.split('.')[-1]

            # 检测标签
            tags = self._detect_tags(class_name, method_code)

            # 写入对应目录
            for tag in tags:
                tag_dir = self.output_root / tag

                # 按类聚合到文件
                class_file = tag_dir / f"{class_name}.java"
                if class_file not in class_files:
                    class_files[class_file] = open(class_file, 'w', encoding='utf-8')

                # 写入方法代码
                header = f"// === Method: {method_name} ===\n"
                class_files[class_file].write(header + method_code + '\n\n')

        # 关闭所有文件
        for f in class_files.values():
            f.close()


def rag_init(test=True):
    print("start rag init:\n")
    project_methods = analysis_java_files(project_dir)
    # project_methods = {}
    # 分析依赖库
    dep_analyzer = DependencyAnalyzer()
    try:
        dependency_methods = dep_analyzer.analyze_dependencies()
    finally:
        dep_analyzer.cleanup()
    #
    # # 合并结果
    project_methods.extend(dependency_methods)
    # classifier = MethodClassifier()
    # classifier.classify_methods(all_methods)
    # 写入文件
    # with open("rag.txt", "w", encoding="utf-8") as f:
    #     for k, v in all_methods.items():
    #         f.write(f"{k}\n:{v}\n\n")
    RAG.batch_add_data(project_methods)
    if test:
        while True:
            query = input("please enter your question(quit to exit):")
            if query != "quit":
                score, key, result = RAG.enhanced_query(query)[0]
                print(result)
            else:
                break
    print("end rag init:\n")


def main():
    rag_init()
    # mod = minecraft_mod("AutoGeneratedMod", r"C:\Users\bcjPr\Desktop\gtnh\ExampleMod1.7.10", "shordinger")
    # mod.generate_main_mod_file()
    # mod.add_items('test item1', 'test item2', 'test item 3')
    # mod.add_blocks('test block1', 'test block2', 'test block3')
    # mod.write_items()
    # mod.write_blocks()
    # mod.write_lang_all()
    # mod.build()
    # mod.spotless()


# 分析项目代码


if __name__ == "__main__":
    main()
